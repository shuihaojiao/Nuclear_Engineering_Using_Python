**该代码使用高斯-赛德尔 (Gauss-Seidel) 迭代法，数值求解一维泊松方程 d²φ/dx² = f(x)，并可视化了求解过程的收敛曲线和残差分布。**

---

### 🎯 核心目标

代码旨在求解以下偏微分方程：
*   **方程**: `d²φ/dx² = f(x)` 在区间 `x ∈ [0, 1]`。
*   **源项 f(x)**: `f(x) = sin(πx)/2 + sin(16πx)/2`。这是一个由低频和高频正弦波叠加的函数。
*   **边界条件**: 使用**狄利克雷边界条件 (Dirichlet boundary conditions)**，即 `φ(0) = 0` 和 `φ(1) = 0`。

### ⚙️ 算法流程

代码通过以下步骤实现求解：

1.  **空间离散化 (Discretization)**
    *   将 `[0, 1]` 区间划分为 `N=64` 个子区间，格点间距为 `dx = L/N`。
    *   二阶导数使用**中心差分**近似：`d²φ/dx² ≈ (φ[j+1] - 2φ[j] + φ[j-1]) / dx²`。

2.  **高斯-赛德尔迭代 (Gauss-Seidel Iteration)**
    *   这是代码的核心。它在一个循环中不断更新解 `φ` 的近似值，直到收敛。
    *   **更新公式**: 循环中 `new[j] = (phi[j+1] + new[j-1] - dx² * f[j-1]) / 2` 这一行，正是从离散化的泊松方程推导出的高斯-赛德尔迭代公式。它在计算点 `j` 的新值时，立即使用了点 `j-1` 刚刚计算出的新值 `new[j-1]`。

3.  **残差计算 (Residual Calculation)**
    *   在每次迭代后，代码计算**残差 (residual)** `r`，其定义为 `r = f(x) - Aφ_new`，其中 `Aφ_new` 是当前解 `new` 带入离散方程左侧的结果。
    *   残差 `r` 的大小衡量了当前解 `new` 满足原方程的程度。`r` 越小，解越精确。

4.  **收敛判断 (Convergence Check)**
    *   循环的终止条件是**最大残差的绝对值** `max(abs(r))` 小于阈值 `0.001`，或达到最大迭代次数 `10000`。

### 📊 可视化与输出

代码最后生成并保存一张名为 `gs.png` 的图片，包含两个子图：

1.  **收敛曲线 (Convergence Curve)**
    *   **X轴**: 迭代次数。
    *   **Y轴**: 每次迭代后残差向量的无穷范数，即 `max(|r_j|)`.
    *   **目的**: 展示算法的收敛速度。理想情况下，该曲线会快速下降。

2.  **残差分布 (Residual Distribution)**
    *   **X轴**: 空间位置 `x_j`。
    *   **Y轴**: 残差 `r_j` 的值。
    *   **目的**: 展示残差在不同迭代次数（0次、10次、100次）下的空间分布。这有助于分析算法对不同频率误差成分（来自源项 `f(x)`）的消除效率。通常，高斯-赛德尔法能快速消除高频误差，而消除低频误差较慢。